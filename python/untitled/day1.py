#!/usr/bin/puthon#_*_coding:utf_8  _*_#print('hello',123,0)# a = input('请输入密码：')# print(a)#a=3#b=4#c=5#print(a,b,c)##rint(a+2)#="a"#print(type(a))#a="jhopjhm"#print(a[1::4])#改大小写\# a='wqe'# e=a.upper()# print(e)#替换#a='qwrqwre'#b=a.replace('q','g')#print(b)#分割#a='qwreqwrfg'#b=a.split('wr')#print(b)#空格替换#a='swrrwe wqe we'#b=a.replace(' ','')#print(b)#a=' adfqfqw'#b=a.lstrip()#print(b)#连接#a='awersfa'#b=a.split('er')#print(b)#c='__'.join(b)#print(c)#连接#a= ['wqe','qwsad','qwe']#b='=='.join(a)#3print(b)#c=b.split('q')#print(c)#格式化#a = 1#b = 'user{}'.format(b)#格式化#a='affdw{name}adff{age}dff{sex}'#b=a.format(age=90,name='da',sex='xiao')#print(b)#c=b.split('ff')#rint(c)#d='--'.join(c)#print(d)#a = 'hello%s,今年%d岁了,你个大%s'#b = a%('美女',18,'傻嗨')#print(b)#获取某个字符串的下标位置#a = 'ahgewohg'#b = a.index('w')#print(b)#c = a.count('h')#print(c)#len  获取字符串的总共个数#a = 'dfeergwer'#print(len(a))#大小写# a=' eepgfweghw '# b =a.  upper()# print(b)# c = b.split('WE')# print(c)# d = b.replace('GF','kk')# print(d)# e = d.strip()# print(e)# f ='_'.join(a)# print(f)# g = f.count('p')# print(g)# h = a.index('e')# print(h)# print(len(a))#分割# a = 'egergwerfwe'# b = a.split('er')# print(b)#替换# a = 'egergwerfwe'# # b = a.replace('er','km')# # print(b)#删除# a = 'egergwerfwe'# b = a.replace('er','')# print(b)#除左右空格# a = '  egergwerfwe  '# b = a.strip()# print(b)#替换中间空格# a = 'wegwe fwqe qfd '# b = a.replace(' ','' )# print(b)#判断以什么开头# a = 'egergwerfwe'# b = a.endswith('we',)# print(b)#连接格式化# a = 'jga%sgeg%dgweg%s'# b = a%('w',2,2)# print(b)#index# a = 'egergwerfwe'# print(len(a))# #count# a = 'egergwerfwegw'# b = a.replace('gw','kk',1)# print(b)# a = 'e'# b = a.upper()# print(b)# bowen = [123,'大','小']# print(type(bowen))# bowen = list('123')# print(type(bowen))#添加一个值默认在最后一位# bowen = [1,1,2,3,'大','小','中']# bowen.append(1)# print(bowen)#删除指定值默认第一个# bowen = [0,1,2,3,'大','小','中']# bowen.remove(1)# print(bowen)#指定位置删除（索引）# bowen = [1,1,2,3,'大','小','中']# bowen.pop(100)# print(bowen)#排序# abc = [1,4,5,7,3,2]# abc.sort()# abc.reverse()# print(abc)#倒序：先升序再倒序# abc = [1,4,5,7,3,2]# abc.sort()# abc.reverse()# print(abc)# bowen = [1,'大','小','中']# f=bowen.count('大')# print(f)# hanwl = [1,7,3,54,'sda']# # print(hanwl[::2])# ## #print(hanwl[2::])# ## print(hanwl[2])# ## print(hanwl[:2])# ## print(hanwl[4:])## print(hanwl[4::])## print(hanwl[::2])# a = [2,3,5,3,6,9,5]# a.insert(2,0)# print(a)# a = [2,3,5,3,6,9,5]# a.remove(2)# print(a)# a = [2,3,5,3,6,9,5]# a.pop(2)# print(a)# a = [2,3,5,3,6,9,5]#更改  重新赋值# a = [2,3,6,9,5]# a[1]=20# print(a)#将两个列表合并到一起# a = [2,3,5,3,6,9,5]# b = [9,7,5,7,]# a.extend(b)# print(a)#浅复制# a = [6,9,5]# b = [2,3,45,a]# f=b.copy()# a.append(100)# b.append(20000)# print(b)# print(f)#深复制# import copy# a=[2,3,4]# b=[5,6,9,a]# ff=copy.deepcopy(b)# b.append(1000)# print(b)# print(ff)#元组# a = (2,4,3,'ad','af')# print(type(a))#统计某元组的某个字符个数# a=(4,12,4)# b=a.count(4)# print(b)#获取某元组的下标位置# a=(2,4,67)# b=a.index(4)# print(b)#统计某元组的个数# a=(2,34,5,4,6,7)# print(len(a))#字典#添加键值对# a={'name':'小明','age':'18',}# b={'p':123,'w':456}# a['sex']='男'# print(a)#删除  pop 删除某个键值对# a.pop('age')# print(a)#默认删除最后一个键值对# a.popitem()# print(a)#获取所有的键# b = a.keys()# print(b)#获取所有的值# b = a.values()# print(b)#获取所有的键值对# b = a.items()# print(b)#将b中的所有键值对更新到a中# a.update(b)# print(a)#集合#a= {12,3,'name',565,6,6,'fsa'}# #添加# a={12,3,43,4,'we'}# a.add(('qwe',123))# print(a)#删除# a.remove(12)# print(a)#随机删除一个# a.pop()# print(a)#更新#b={1,23,3}# a.update(b)# print(a)#并集#print(a|b)#交集#print(a&b)#补集#print(a-b)# b = 123# b = str(b)# print(type(b))# a = '{}*{}={}'# b = a.format(12,21,21*12)# print(b)# a = '%d*%d=%d'# b =  a%(12,21,12*21)# print(b)#占位符# 运算符# +，- ，* ，/(完全除)，//整除，%（求余数）# a = 9 / 4# print(a)# 比较运算符# >,<,>=,<=,==,!=# 赋值运算符# +=，-=，*= ，/=(完全除)，//=整除，%=（求余数）# 成员运算符#  in  ，not in# 逻辑运算符# and  or   not# 单分支# a = input('>>>')  # 手动添加为字符串  需要更改相对应的数据类型# a = int(a)# if a > 3:#     print('hello')## 双分支# a = 8# if a > 3:#     print('hello')# else:         #不能跟条件#     print('hi')## 多分支判段语句# a = input('>>>')# a = int(a)# if a >= 90:#     print('优秀')# elif 80 < a and a < 90:#     print('良')# elif 70 < a and a < 80:#     print('及格')## 嵌套判断# a = 6# if a%2==0:   # 满足第一个条件后进行下一个条件#      if a%3==0:  ##       print('hello')# 1.既能除以2又能除以3  打印hello# 2.能除以2但不能除以3   打印 world# 3.不能除以2但能除以3  打印  hi# 4.都不能  打印123# a = input('>>>')# a =int(a)# if a%2==0:#     if a%3==0:#      print('hello world')#     else:#      print('hello')# elif a%3==0:#     print('world')# else:#     print(123)## 循环语句# num=0# for i in range(1,101,1):#   num=num+i# print(num)# 1-2+3-4+5....+100# num=0# for i in range(1,100,1):#  if i%2==0:#   num=num-i#  else:#     num=num+i# print(num)### 循环嵌套语句# import  random# a = random.randrange(1,10)# for i  in range(1,4):#     q= input('>>>')#     q= int(q)#     if q==a:#         print('恭喜')#         break#     elif q > a :#         a='小了小了，还有{}次机会'#         print(a.format(3-i))#     else:#         a = '小了小了，还有{}次机会'#         print(a.format(2- i))# else:#     print('菜')# for   elae   语句# a = [12,35,6,]# for i in enumerate(a):#     print(i)## 九九乘法表# for i in range(1,10):#      for j in range(1,i+1):#       sum='{}*{}={}'#       print(sum.format(i,j,i*j),end='\t')#       if i == j:   #        print('')#一百之内的质数之和# sum=0# for i in range(2,101):#     for  j  in  range(2,i+1):#       if i%j==0:#        break#     if i==j:#      sum=sum+i# print(sum)#100-1000之内的水仙花数# for i in range(100,1000):#      a=i//100#      b=i//10%10#      c=i%10#      d=a**3+b**3+c**3#      if i == d:#       print(i)#一千之内的因数和等于本身的数# for i in range(2,1001):#     sum=0#     for j in range(1,1000):#         if j<i:#            if i%j==0:#             sum=sum+j#     if sum==i:#      print(i)#阶乘之和# a = 0# b = 0# c=input('>>>')# c=int(c)# for i in range(c):#     a=a*i#     a=b+i#     print(a)# import  xlwt# f = xlwt.Workbook('utf-8')# sheet = f.add_sheet('python_test')# e  =f.sheets()[0]## a = sheet.row_values()## b = sheet.nrows# c = f.nsheets# d = sheet.row_values# import  pymysql# conn = pymysql.connect(host='192.168.0.1',user='root',passwd='123456',port='3306')# m = conn.cursor()# m.execute('use test')# f =  open('a.txt','w',encoding='utf-8')# b = f.readline()# for  i  in range(4):#     w = g[i]#import  unittest#unittest   写单元测试用的  断言用的#那预期结果与实际结果做对比的过程# class demo(unittest.Testcase):#     def test_1(self):#         #假设预期结果是1#         #实际结果2#         #判断预期结果与实际结果是否相等#         a = 1  #预期结果    #断言：#     self.assertEqual(a,2)# if _name_ == '_main_':#     unittest.main()